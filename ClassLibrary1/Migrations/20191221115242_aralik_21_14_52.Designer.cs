// <auto-generated />
using System;
using ClassLibrary1.Models.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLibrary1.Migrations
{
    [DbContext(typeof(DbContextSqlBackup))]
    [Migration("20191221115242_aralik_21_14_52")]
    partial class aralik_21_14_52
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.UserSqlBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_02_UserJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_01_UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DbServerParametersId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("destination_CloudId")
                        .HasColumnType("int");

                    b.Property<int?>("destination_LocalId")
                        .HasColumnType("int");

                    b.Property<int?>("destination_NetworkId")
                        .HasColumnType("int");

                    b.Property<int?>("notificationEmailId")
                        .HasColumnType("int");

                    b.Property<int?>("scheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("B_01_UserId");

                    b.HasIndex("DbServerParametersId");

                    b.HasIndex("destination_CloudId");

                    b.HasIndex("destination_LocalId");

                    b.HasIndex("destination_NetworkId");

                    b.HasIndex("notificationEmailId");

                    b.HasIndex("scheduleId");

                    b.ToTable("UserJobs");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_03_DbServerParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AuthType")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DbServerParameters");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_04_DbNameOnThisDbServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_03_DbServerParametersId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("B_03_DbServerParametersId");

                    b.ToTable("DbNameOnThisDbServer");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_05_FoldersToBeBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_02_UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("folderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("B_02_UserJobsId");

                    b.ToTable("FoldersToBeBackup");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_06_FilesToBeBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_02_UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("B_02_UserJobsId");

                    b.ToTable("FilesToBeBackup");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_07_Destination_Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocalAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAccountPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destination_Local");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_08_Destination_Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NetworkAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destination_Network");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_09_Destination_Cloud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloudAccountPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloudAccountname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloudPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Destination_Cloud");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_10_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("B_02_UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDetail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("B_02_UserJobsId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_11_NotificationEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPUserPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationEmail");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_12_Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndRunBetween")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Freq")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsFriday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThursday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWednesday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartRunBetween")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_02_UserJobs", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserSqlBackup", null)
                        .WithMany("B_02_UserJobs")
                        .HasForeignKey("B_01_UserId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_03_DbServerParameters", "DbServerParameters")
                        .WithMany()
                        .HasForeignKey("DbServerParametersId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_09_Destination_Cloud", "destination_Cloud")
                        .WithMany()
                        .HasForeignKey("destination_CloudId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_07_Destination_Local", "destination_Local")
                        .WithMany()
                        .HasForeignKey("destination_LocalId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_08_Destination_Network", "destination_Network")
                        .WithMany()
                        .HasForeignKey("destination_NetworkId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_11_NotificationEmail", "notificationEmail")
                        .WithMany()
                        .HasForeignKey("notificationEmailId");

                    b.HasOne("ClassLibrary1.Models.DomainModels.B_12_Schedule", "schedule")
                        .WithMany()
                        .HasForeignKey("scheduleId");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_04_DbNameOnThisDbServer", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.B_03_DbServerParameters", null)
                        .WithMany("DatabasesOnThisServer")
                        .HasForeignKey("B_03_DbServerParametersId");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_05_FoldersToBeBackup", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.B_02_UserJobs", null)
                        .WithMany("FoldersToBeBackups")
                        .HasForeignKey("B_02_UserJobsId");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_06_FilesToBeBackup", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.B_02_UserJobs", null)
                        .WithMany("FilesToBeBackups")
                        .HasForeignKey("B_02_UserJobsId");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.B_10_Log", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.B_02_UserJobs", null)
                        .WithMany("logs")
                        .HasForeignKey("B_02_UserJobsId");
                });
#pragma warning restore 612, 618
        }
    }
}
