// <auto-generated />
using System;
using ClassLibrary1.Models.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLibrary1.Migrations
{
    [DbContext(typeof(DbContextSqlBackup))]
    [Migration("20191225184721_aralik_14_19_02")]
    partial class aralik_14_19_02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.DbNameOnThisDbServer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DbServerParametersId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DbServerParametersId");

                    b.ToTable("DbNameOnThisDbServer");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.DbServerParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AuthType")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId")
                        .IsUnique();

                    b.ToTable("DbServerParameters");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Cloud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CloudAccountPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloudAccountname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloudPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("Destination_Cloud");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocalAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalAccountPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("Destination_Local");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NetworkAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("Destination_Network");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.FilesToBeBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("FilesToBeBackup");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.FoldersToBeBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.Property<string>("folderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("FoldersToBeBackup");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.NotificationEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPUserPass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId")
                        .IsUnique();

                    b.ToTable("NotificationEmail");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndRunBetween")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Freq")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsFriday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsThursday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWednesday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartRunBetween")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserJobsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserJobsId")
                        .IsUnique();

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.UserJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserSqlBackupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("createdTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserSqlBackupId");

                    b.ToTable("UserJobs");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.UserSqlBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.DbNameOnThisDbServer", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.DbServerParameters", "DbServerParameters")
                        .WithMany("DatabasesOnThisServer")
                        .HasForeignKey("DbServerParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.DbServerParameters", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithOne("DbServerParameters")
                        .HasForeignKey("ClassLibrary1.Models.DomainModels.DbServerParameters", "UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Cloud", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("Destination_Cloud")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Local", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("Destination_Local")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Destination_Network", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("Destination_Network")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.FilesToBeBackup", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("FilesToBeBackup")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.FoldersToBeBackup", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("FoldersToBeBackups")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Log", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithMany("Logs")
                        .HasForeignKey("UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.NotificationEmail", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithOne("NotificationEmail")
                        .HasForeignKey("ClassLibrary1.Models.DomainModels.NotificationEmail", "UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.Schedule", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserJobs", "userJobs")
                        .WithOne("Schedule")
                        .HasForeignKey("ClassLibrary1.Models.DomainModels.Schedule", "UserJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary1.Models.DomainModels.UserJobs", b =>
                {
                    b.HasOne("ClassLibrary1.Models.DomainModels.UserSqlBackup", "userSqlBackup")
                        .WithMany("UserJobs")
                        .HasForeignKey("UserSqlBackupId");
                });
#pragma warning restore 612, 618
        }
    }
}
